/**
 * 通用弹出框 （按钮控制）
 * @author Dean
 * title 如果没有就不显示  
 * paramsItemList [{id:"",num:"",vo:""}] 如果是宠物的话 传入 [{id:"",num:"",petVo:""}] 
 * paramsButton 按钮类  [{strName:"",cb:"",cbParam:""},]
 * e.g MainUILayer [gotoVipLayer gotoRechargeLayer gotoRewardLayer]
 */ 
var TipWindow = cc.Layer.extend({
    ctor:function(paramsItemList, paramsButton, title, hasBG, extParam)
    {
        this._super();
        this.setName("tipWindow");
        this.isOver = false;
        var tempThis = this;
        var listener = cc.EventListener.create({
        	event:cc.EventListener.TOUCH_ONE_BY_ONE,
        	swallowTouches:true,
        	onTouchBegan:function() {
                return true;
            },
            onTouchEnded:function() {
                if (paramsButton) {
                    if (tempThis.isOver && paramsButton.length == 1) {
                        tempThis.myCallBack(paramsButton[0]);
                    };
                }
                else {
                    tempThis.myCallBack();
                }
            }
        });
        
        if(VoManager.newGuideId < 0) {
            cc.eventManager.addListener(listener,this);
        }
        
        this.checkExtParam(extParam);
        this.initColorLayer(hasBG);
        
        this.initBackGround(paramsItemList);
        this.initButton(paramsButton);
        this.initTitle(title);

        this.initData(paramsItemList);
    },

    checkExtParam:function(extParam)
    {
        if (extParam) {
            this.chaX = extParam["offsetX"] || 0;
            this.chaY = extParam["offsetY"] || 0;
        }
        else {
            this.chaX = 0;
            this.chaY = 0;
        }
    },

    initPlayerInfoLayer:function() 
    {
        this.playerBaseInfoLayer = new PlayerBaseInfoLayer();
        this.addChild(this.playerBaseInfoLayer, 10000);
    },

    initBottomButton:function()
    {
        this.toolBarLayer = new ToolBarLayer(0);
        this.addChild(this.toolBarLayer);
    },

    initColorLayer:function(hasBG)
    {
        if (hasBG) {
            this.layerBg = new cc.Sprite(res.background1);
            this.addChild(this.layerBg);
        }
        else {
            this.layerBg = new cc.LayerColor(cc.color(125, 125, 125, 100));
            this.addChild(this.layerBg);
        }
    },

    initBackGround:function(paramsItemList)
    {
        if (typeof(paramsItemList) == "object" && paramsItemList != null) 
        {
            if (paramsItemList.length <= 4)
                var tempHeight = 340;
            else if (paramsItemList.length > 4 && paramsItemList.length <= 8)
                tempHeight = 480;
            else if (paramsItemList.length > 8)
                tempHeight = 630;
        }
        else
            tempHeight = 340;

        this.boxBg = Scale9SpriteFactory.winBgAngle(GC.BOX_W-10,tempHeight);
        this.boxBg.setName("boxBg");
        this.addChild(this.boxBg);
        this.boxBg.setScale(0.9);

        this.boxBg.x = cc.winSize.width * 0.5;
        this.boxBg.y = cc.winSize.height * 0.5;

        // action 
        var action = cc.scaleTo(0.5, 1).easing(cc.easeElasticOut());
        var seqDone = cc.sequence(action,cc.callFunc(function(){NoticeManager.sendNotice(NoticeName.ACTION_END);}));
        this.boxBg.runAction(seqDone);
    },

    initTitle:function(title)
    {
        if (!title)
            return ;

        this.titleBg = new TitleBarBase(title);
        this.boxBg.addChild(this.titleBg);
        this.titleBg.y = this.boxBg.h * 0.5;
        this.titleBg.setFlip();
    },

    initButton:function(paramsButton)
    {
        if (!paramsButton)
        {
            var myButton = new ButtonBase(res.commonButtonLong,VoManager.getLocalizedString(1),this.myCallBack.bind(this));
            myButton.setName("myButton");
            myButton.setTag(10002);
            this.boxBg.addChild(myButton);
            myButton.y = - this.boxBg.h * 0.35;
            myButton.setTTFSize(24);
        }
        else if (paramsButton.length == 1)
        {
            var itemInfo = paramsButton[0];
            if (itemInfo["strName"])
                var itemName = itemInfo["strName"];
            else
                itemName = VoManager.getLocalizedString(1);

            myButton = new ButtonBase(null,itemName,
                this.myCallBack.bind(this),false,itemInfo);
            myButton.setName("myButton");
            myButton.setTag(10002);
            this.boxBg.addChild(myButton);
            myButton.y = - this.boxBg.h * 0.35;
            myButton.setTTFSize(24);
        }
        else if (paramsButton.length == 2)
        {
            var itemInfo = paramsButton[0];
            var itemInfo1 = paramsButton[1];

            if (itemInfo["strName"])
                var itemName = itemInfo["strName"];
            else
                itemName = VoManager.getLocalizedString(1);

            if (itemInfo1["strName"])
                var itemName1 = itemInfo1["strName"];
            else
                itemName1 = VoManager.getLocalizedString(2);

            var LeftButton = new ButtonBase(null,itemName,
                this.myCallBack.bind(this),false,itemInfo);
            LeftButton.setName("leftButton");

            this.boxBg.addChild(LeftButton);
            LeftButton.x = -this.boxBg.w * 0.3;
            LeftButton.y = - this.boxBg.h * 0.35;
            LeftButton.setTTFSize(24);

            var rightButton =  new ButtonBase(null,itemName1,
                this.myCallBack.bind(this),false,itemInfo1);
            rightButton.setName("rightButton");

            this.boxBg.addChild(rightButton);
            rightButton.x = this.boxBg.w * 0.3;
            rightButton.y = - this.boxBg.h * 0.35;
            rightButton.setTTFSize(24);
        }
    },

    initData:function(paramsItemList)
    {
        if (paramsItemList == null)
            return ;

        if (typeof(paramsItemList) == "string") 
        {
            if (this.chaX == 0 && this.chaY == 0) {
                var s = paramsItemList.replace(/(.{24})/g,'$1\n');
            }
            else {
                s = paramsItemList;
            }
            this.boxText = new LabelFonts(s, [{color:'#00ffde',size:20},{color:'#00ffde',size:22}]);
            this.boxBg.addChild(this.boxText);
            // this.boxText.updateX(- this.boxText.getWidth() * 0.5 - 100);
            this.boxText.updateX(this.boxBg.width*0.5 - this.boxText.getWidth()*0.5 + this.chaX);
            this.boxText.y = this.boxBg.h * 0.15 + this.chaY;
        }
        else
        {
            var IconBg = new cc.Node();
            this.boxBg.addChild(IconBg);

            var icon = null;

            this.updateData(paramsItemList);

            var newList = this.checkList(paramsItemList);

            for (var i = 0; i < newList.length; i++) {
                icon = this.getIcon(i, newList[i], newList.length);
                IconBg.addChild(icon);
            };

            if (newList.length < 4)
                IconBg.x = - 140 * (newList.length - 1) * 0.5;
            else
                IconBg.x = - 140 * (4 - 1) * 0.5;

            IconBg.y = this.boxBg.h * 0.1 + 140 * parseInt(newList.length/4.1) * 0.5;
        }

        this.isOver = true;
    },

    updateData:function(dataList)
    {
        for (var i = 0; i < dataList.length; i++) {
            var goodsId = dataList[i].id + "";
            var itemNum = 1;
            if (dataList[i].num)
                itemNum = parseInt(dataList[i].num);

            var goodsIdTwo = null;
            // update data
            if (goodsId.indexOf('_') != -1) {
                goodsIdTwo = goodsId.split('_')[0];
                var itemInfo = VoManager.getItem(goodsIdTwo);
                var type = goodsIdTwo/10000;
            }
            else {
                itemInfo = VoManager.getItem(goodsId);
                type = goodsId/10000;
            }
            var name = itemInfo.name;
            type = type>>0;
            if(type == LoadXmlType.EQUIP)
            {
                // equip
            	var vo = null; 
            	if (dataList[i].vo) {
            		vo = dataList[i].vo;
            	}
            	else {
            		vo = new EquipVO({uniqueId:goodsId});
            	}
                VoManager.addEquip(vo);
                VoManager.addPromptNum("equip");
            }
            else if(type == LoadXmlType.GOODS)
            {
                // goods
                var vo = null; 
                if (itemInfo.stype == 0) {
                    vo = new GoodsVO({id:goodsId});
                    var num = VoManager.localPlayer[itemInfo.key] + itemNum;
                    TipManager.floatTip(itemInfo.key, [,num]);
                }
                else {
                    vo = new GoodsVO({id:goodsId,count:itemNum});
                    var tot = itemNum + VoManager.getItemNumById(goodsId, VoManager.goods);
                   // vo.updateAllGoodsStatic(tot);
                    VoManager.addGoods(vo,tot);
                    VoManager.addPromptNum("goods");
                }
            }
            else if(type == LoadXmlType.PET)
            {
            	var vo = null; 
                // pet
                if (dataList[i].vo) {
                    vo = dataList[i].vo;
                }
                else {
                    vo = new PetVO({uniqueId:goodsId});
                }
                VoManager.addPet(vo);
                VoManager.addPromptNum("pet");
                name = name[0];
            }
        };
    },

    checkList:function(oldList)
    {
        var newList = [];
        var jingtiList = [];

        for (var i = 0; i < oldList.length; i++) {
            var goodsId = oldList[i].id + "";
            if (goodsId.indexOf('_') != -1) {
                goodsIdTwo = goodsId.split('_')[0];
                var itemInfo = VoManager.getItem(goodsIdTwo);
                if (itemInfo.petType == 0)
                    jingtiList.push(oldList[i]);
                else
                    newList.push(oldList[i]);
            }
            else
                newList.push(oldList[i]);
        };

        if (jingtiList.length == 0) 
            return newList;

        var nameList = [];
        for (var i = 0; i < jingtiList.length; i++) {
            var myId= jingtiList[i].id.split('_')[0];
            if (nameList.length == 0) {
                var xxx = {id:myId,num:1};
                nameList.push(xxx);
            }
            else {
                var xxx = null;
                var isSame = true;
                for (var j = 0; j < nameList.length; j++) {
                    var nameId = nameList[j].id;
                    if (nameId == myId) {
                        nameList[j].num++;
                        isSame = true;
                        break;
                    }
                    else {
                        isSame = false;
                        var xxx = {id:myId,num:1};
                    }
                };
                if (!isSame) {
                    nameList.push(xxx);
                };
            }
        };

        for (var j = 0; j < nameList.length; j++) {
            newList.push(nameList[j]);
        };
        return newList;
    },

    getIcon:function(idx, paramsItem, maxLength)
    {
        var goodsId = paramsItem.id + "";
        var itemNum = 1;
        if (paramsItem.num)
            itemNum = parseInt(paramsItem.num);

        var icon = null;
        var goodsIdTwo = null;
        // update data
        if (goodsId.indexOf('_') != -1) {
            goodsIdTwo = goodsId.split('_')[0];
            var itemInfo = VoManager.getItem(goodsIdTwo);
            var type = goodsIdTwo/10000;
        }
        else {
            itemInfo = VoManager.getItem(goodsId);
            type = goodsId/10000;
        }
        var name = itemInfo.name;
        type = type>>0;
        if(type == LoadXmlType.EQUIP)
        {
            // equip
            var vo = new EquipVO({uniqueId:goodsId});
            icon = new EquipIcon(vo);
        }
        else if(type == LoadXmlType.GOODS)
        {
            // goods
            var vo = null; 
            if (itemInfo.stype == 0)
                vo = new GoodsVO({id:goodsId});
            else
                vo = new GoodsVO({id:goodsId,count:itemNum});

            icon = new GoodsIcon(vo);
        }
        else if(type == LoadXmlType.PET)
        {
            // pet
            var vo = new PetVO({uniqueId:goodsId});
            icon = new PetIcon(vo);
            name = name[0];
        }

        if (idx > 3) {
            if (maxLength == 5) {
                icon.x = 210;
            }
            else if (maxLength == 6) {
                icon.x = 140 + (idx%4)*140;
            }
            else if (maxLength == 7) {
                icon.x = 70 + (idx%4)*140;
            }
            else if (maxLength == 8) {
                icon.x = (idx%4)*140;
            }
            else if (maxLength == 9) {
                if (idx < 8)
                    icon.x = (idx%4)*140;
                else
                    icon.x = 210;
            }
            else if (maxLength == 10) {
                if (idx < 8)
                    icon.x = (idx%4)*140;
                else
                    icon.x = 140 + (idx%4)*140;
            }
        }
        else
            icon.x = (idx%4)*140;

        icon.y = -parseInt(idx/4)*140;

        var colorList = [cc.color(MyColor.WHITE),cc.color(MyColor.WHITE),
                cc.color(MyColor.GREEN),cc.color(MyColor.BLUE),cc.color(MyColor.VIOLET),
                cc.color(MyColor.GOLD),cc.color(MyColor.PINK),cc.color(MyColor.RED)];

        if (colorList[itemInfo.starLevel])
            var nowColor = colorList[itemInfo.starLevel];
        else
            nowColor = cc.color(MyColor.BLUE);

        var label = new LabelFonts(name + "X" + itemNum, null,0,[{color:nowColor,size:18}, {color:nowColor,size:20}]);
        icon.addChild(label, 100);
        label.x = -label.getWidth() * 0.5;
        label.y = -icon.getHeight()*0.65;

        return icon;
    },

    myCallBack:function(itemInfo)
    {
        if (itemInfo && itemInfo["cb"])
        {
            cc.log("myCallBack" + itemInfo["cbParam"]);
            if (itemInfo["cbParam"])
                itemInfo["cb"](itemInfo["cbParam"]);
            else
                itemInfo["cb"]();
        }

        this.removeFromParent(true);
    },

    // setTTFSize:function(str, sSize)
    // {
    //     var s = str.replace(/(.{25})/g,'$1\n');
    //     this.boxText = new LabelFonts(s, [{color:'#00ffde',size:sSize}]);
    //     this.boxBg.addChild(this.boxText);
    //     // this.boxText.updateX(- this.boxText.getWidth() * 0.5 - 100);
    //     this.boxText.updateX(this.boxBg.width*0.5 - this.boxText.getWidth()*0.5);
    //     this.boxText.y = this.boxBg.h * 0.15 ;
    // },

    onRemoveThis:function()
    {
        this.removeFromParent(true);
    }
})