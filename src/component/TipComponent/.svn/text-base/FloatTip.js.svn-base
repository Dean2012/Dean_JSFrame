/**
 * 悬浮框
 * @author Dean
 * 使用起来不需要设置其他东西 只需要导入背景路径,输出文字 位置自动放在屏幕最当中。
 * 持续3秒钟自动消失
 */ 
var FloatTip = cc.Sprite.extend({
    strPath:null,
    strMsg:null,
    delayTime:0,
    ctor:function(strPath, strMsg, delayTime, detail)
    {
        this._super();

        if (strPath == null)
            this.strPath = null;
        else
            this.strPath = strPath;

        if (strMsg == null)
            this.strMsg = "your Msg is null!";
        else
            this.strMsg = strMsg;

        if (delayTime != null)
            this.delayTime = delayTime;

        this.detail = detail || null;
        if (detail != null) {
            this.initSpecialSpr(detail);
            return ;
        };

        this.initSprite();
    },
    initSprite:function()
    {
        var size = cc.winSize;
        if (this.strPath == null) {
            this.spriteBackGround = new cc.Scale9Sprite(res.LuckySmallBorder);
            this.spriteBackGround.width = GC.BOX_W;
            this.spriteBackGround.height = 29;
        }
        else {
            this.spriteBackGround = new cc.Sprite(this.strPath);
        }
        this.spriteBackGround.x = size.width * 0.5;
        this.spriteBackGround.y = size.height * 0.4;
        this.addChild(this.spriteBackGround);
        this.spriteBackGround.setScale(1.0);

        var strMsgTTF = new LabelFonts(this.strMsg, null,0,[{color:'#ffffff',size:20}, {color:'#ffffff',size:22}]);
        this.spriteBackGround.addChild(strMsgTTF);
        strMsgTTF.setPosition(this.spriteBackGround.width*0.5-strMsgTTF.getWidth()*0.5, this.spriteBackGround.height*0.5);

        //action
        var actionDelay1 = cc.delayTime(this.delayTime*0.5);
        var actionSpawnIn = cc.spawn(
              cc.fadeIn(0.5),
              cc.moveBy(0.5, cc.p(0,100)));
        var actionDelay = cc.delayTime(1.0);
        var actionSpawnOut = cc.spawn(
              cc.fadeOut(1),
              cc.moveBy(1, cc.p(0,100))
        );
        var actionCall = cc.callFunc(this.onSetRunning, this);
        var actionCallback = cc.callFunc(this.onRemoveThis, this);
        var actionSequence = cc.sequence
        (
            actionDelay1,
            actionSpawnIn,
            actionCall,
            actionSpawnOut,
            actionCallback
        );

        this.spriteBackGround.runAction(actionSequence);
    },

    initSpecialSpr:function(argument) {
        ccs.armatureDataManager.addArmatureFileInfo(res.achievementEffect);

        var size = cc.winSize;
        this.spriteBackGround = new cc.Sprite(argument["bg"]);
        this.spriteBackGround.x = size.width * 0.5;
        this.spriteBackGround.y = size.height * 0.6;
        this.addChild(this.spriteBackGround);
        this.spriteBackGround.setScale(0.7);

        var myName = new LabelFonts(argument["name"], null,0,[{color:'#ffffff',size:20}, {color:'#ffffff',size:22}]);
        this.spriteBackGround.addChild(myName);
        myName.setPosition(this.spriteBackGround.width*0.5-myName.getWidth()*0.5, this.spriteBackGround.height*0.65);

        var myDes = new LabelFonts(argument["des"], null,0,[{color:'#ffffff',size:20}, {color:'#ffffff',size:22}]);
        this.spriteBackGround.addChild(myDes);
        myDes.setPosition(this.spriteBackGround.width*0.5-myDes.getWidth()*0.5, this.spriteBackGround.height*0.35);

        var leftIcon = Util.getIconImg(argument["leftIcon"]);
        this.spriteBackGround.addChild(leftIcon);
        leftIcon.x = this.spriteBackGround.width * 0.15;
        leftIcon.y = this.spriteBackGround.height * 0.5;

        // var finishIcon = new cc.Sprite(resMission.achieveFinish);
        // this.spriteBackGround.addChild(finishIcon, 100);
        // finishIcon.x = this.spriteBackGround.width * 0.15 + 30;
        // finishIcon.y = this.spriteBackGround.height * 0.5 - 30;

        var rightIcon = Util.getIconImg(argument["rightIcon"]);
        this.spriteBackGround.addChild(rightIcon);
        rightIcon.x = this.spriteBackGround.width * 0.85;
        rightIcon.y = this.spriteBackGround.height * 0.6;  
        rightIcon.setScale(0.7);

        var rewardDes = new LabelFonts(argument["rewardDesc"], null,0,[{color:'#fef84e',size:18}, {color:'#fef84e',size:20}]);
        this.spriteBackGround.addChild(rewardDes);
        rewardDes.x = this.spriteBackGround.width * 0.85 - rewardDes.getWidth() * 0.5;
        rewardDes.y = this.spriteBackGround.height * 0.2;

        //action
        var actionDelay1 = cc.delayTime(this.delayTime*0.5);
        var actionSpawnIn = cc.scaleTo(0.3,1.0).easing(cc.easeElasticOut());
        var actionDelay = cc.delayTime(1.0);
        var actionSpawnOut = cc.fadeOut(0.3);
        var actionCall2 = cc.callFunc(this.onSetRunning2, this);
        var actionCall = cc.callFunc(this.onSetRunning, this);
        var actionCallback = cc.callFunc(this.onRemoveThis, this);
        var actionSequence = cc.sequence
        (
            actionDelay1,
            actionSpawnIn,
            actionCall2,
            cc.delayTime(2),
            actionCall,
            actionSpawnOut,
            actionCallback
        );
        this.spriteBackGround.runAction(actionSequence);
    },

    onSetRunning:function()
    {
        TipManager.isRunning = false;
    },

    onSetRunning2:function()
    {
        this.mainEffect = ccs.Armature.create("achievementEffect");
        this.mainEffect.x = this.spriteBackGround.width * 0.5;
        this.mainEffect.y = this.spriteBackGround.height * 0.5;
        this.spriteBackGround.addChild(this.mainEffect);
        this.mainEffect.getAnimation().play("Animation1");
    },

    onRemoveThis:function()
    {
        this.removeFromParent(true);
    }
})